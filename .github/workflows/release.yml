name: luanti-fdev release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

env:
  PROJECT_NAME: luanti-fdev

jobs:
  linux:
    name: Linux x86_64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { submodules: recursive, fetch-depth: 0 }
      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential cmake ninja-build rsync \
            libsdl2-dev libopenal-dev libgl1-mesa-dev libxrandr-dev libxi-dev \
            libjpeg-dev libpng-dev zlib1g-dev libzstd-dev libbz2-dev \
            libsqlite3-dev libjsoncpp-dev libluajit-5.1-dev \
            libogg-dev libvorbis-dev libcurl4-openssl-dev libgmp-dev gettext
      - name: Configure
        run: cmake -S . -B build -G Ninja -DRUN_IN_PLACE=TRUE -DCMAKE_BUILD_TYPE=Release
      - name: Build
        run: cmake --build build -j"$(nproc)"
      - name: Package (tar.gz)
        run: |
          VER="${GITHUB_REF_NAME}"
          PKG="${PROJECT_NAME}-linux-x86_64-${VER}"
          mkdir -p "dist/${PKG}/bin"
          if [ -f build/bin/luanti ]; then BIN=build/bin/luanti; else BIN=build/bin/minetest; fi
          install -m 0755 "$BIN" "dist/${PKG}/bin/luanti"
          for d in builtin client/shaders games mods locale textures fonts doc; do
            [ -d "$d" ] && rsync -a "$d" "dist/${PKG}/"
          done
          [ -f minetest.conf.example ] && cp minetest.conf.example "dist/${PKG}/"
          [ -f LICENSE ] && cp LICENSE "dist/${PKG}/"
          strip "dist/${PKG}/bin/luanti" || true
          ( cd dist && tar -czf "${PKG}.tar.gz" "${PKG}" )
      - uses: actions/upload-artifact@v4
        with:
          name: linux
          path: dist/${{ env.PROJECT_NAME }}-linux-x86_64-${{ github.ref_name }}.tar.gz
          if-no-files-found: error

  windows:
    name: Windows x86_64 (MSYS2 MinGW)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with: { submodules: recursive, fetch-depth: 0 }
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-SDL2
            mingw-w64-x86_64-openal
            mingw-w64-x86_64-libpng
            mingw-w64-x86_64-libjpeg-turbo
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-zstd
            mingw-w64-x86_64-bzip2
            mingw-w64-x86_64-sqlite3
            mingw-w64-x86_64-jsoncpp
            mingw-w64-x86_64-luajit
            mingw-w64-x86_64-gmp
            mingw-w64-x86_64-libogg
            mingw-w64-x86_64-libvorbis
            mingw-w64-x86_64-curl
      - name: Configure (MinGW)
        shell: msys2 {0}
        run: cmake -S . -B build -G Ninja -DRUN_IN_PLACE=TRUE -DCMAKE_BUILD_TYPE=Release
      - name: Build (MinGW)
        shell: msys2 {0}
        run: cmake --build build -j"$(nproc)"
      - name: Package (zip)
        shell: msys2 {0}
        run: |
          VER="${GITHUB_REF_NAME}"
          PKG="${PROJECT_NAME}-windows-x86_64-${VER}"
          mkdir -p "dist/${PKG}/bin"
          if [ -f build/bin/luanti.exe ]; then BIN=build/bin/luanti.exe; else BIN=build/bin/minetest.exe; fi
          install -m 0755 "$BIN" "dist/${PKG}/bin/luanti.exe"
          for dll in \
            /mingw64/bin/SDL2.dll \
            /mingw64/bin/OpenAL32.dll \
            /mingw64/bin/libwinpthread-1.dll \
            /mingw64/bin/libstdc++-6.dll \
            /mingw64/bin/libgcc_s_seh-1.dll \
            /mingw64/bin/libjsoncpp.dll \
            /mingw64/bin/liblua51.dll \
            /mingw64/bin/zlib1.dll \
            /mingw64/bin/libbz2-1.dll \
            /mingw64/bin/libzstd.dll \
            /mingw64/bin/libpng16-16.dll \
            /mingw64/bin/libjpeg-8.dll \
            /mingw64/bin/libogg-0.dll \
            /mingw64/bin/libvorbis-0.dll \
            /mingw64/bin/libvorbisfile-3.dll \
            /mingw64/bin/libcurl-4.dll \
            /mingw64/bin/libgmp-10.dll
          do
            [ -f "$dll" ] && cp "$dll" "dist/${PKG}/bin/" || true
          done
          for d in builtin client/shaders games mods locale textures fonts doc; do
            [ -d "$d" ] && cp -r "$d" "dist/${PKG}/"
          done
          [ -f minetest.conf.example ] && cp minetest.conf.example "dist/${PKG}/"
          [ -f LICENSE ] && cp LICENSE "dist/${PKG}/"
          ( cd dist && powershell -Command "Compress-Archive -Path '${PKG}' -DestinationPath '${PKG}.zip'" )
      - uses: actions/upload-artifact@v4
        with:
          name: windows
          path: dist/${{ env.PROJECT_NAME }}-windows-x86_64-${{ github.ref_name }}.zip
          if-no-files-found: error

  publish:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: [linux, windows]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Create or update release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/linux/${{ env.PROJECT_NAME }}-linux-x86_64-${{ github.ref_name }}.tar.gz
            artifacts/windows/${{ env.PROJECT_NAME }}-windows-x86_64-${{ github.ref_name }}.zip
          draft: false
          prerelease: false

